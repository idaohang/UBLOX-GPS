/*

  Copyright (C)2011 Kostas Tamateas <nosebleedKT@gmail.com>
  This program is distributed under the terms of the GNU
  General Public License, version 2. You may use, modify,
  and redistribute it under the terms of this license.
  A copy should be included with this source.

*/

#ifndef __GPS_H__
#define __GPS_H__

#include <WProgram.h>

const byte grDatum[] = { 0xB5, 0x62, 0x06, 0x06, 0x02, 0x00, 0x48, 0x00, 0x56, 0xDA };

const byte airbone1G[] = { 0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27,
                           0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,
                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xDC};
                           
const byte GGAOFF[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x24 };
const byte GLLOFF[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B };
const byte GSAOFF[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x32 };
const byte GSVOFF[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x39 };
const byte RMCOFF[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x40 };
const byte VTGOFF[] = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x47 };

class GPS
{
  public:
    GPS();
    boolean setup(unsigned long, HardwareSerial &);
    boolean sendUBX(const byte *, byte, HardwareSerial &);
    boolean UBXAck(const byte *, HardwareSerial &);
    void readSentence(HardwareSerial &);
    char utcTime[10];    // UTC Time, fixed length 9
    char Latitude[11];   // Latitude, fixed length 10
    char Equator;        // Equator, fixed length 1
    char Longitude[12];  // Longitude, fixed length 11
    char Meridian;       // Meridian, fixed length 1
    char Altitude[10];   // Altitude above user datum ellipsoid, meters, max length 9
    char NavStat[3];     // Navigation Status, fixed length 2
    char SOG[8];         // Speed over ground, km/h, max length 7
    char COG[7];         // Course over ground, degrees, fixed length 6
    char Vvel[9];        // Vertical velocity, negative=upwards
    char HDOP[6];        // Horizontal Dilution of Precision
    char VDOP[6];        // Vertical Dilution of Precision
    char TDOP[6];        // Time Dilution of Precision
    char SatNum[3];      // Number of GPS satellites used in the navigation solution, max length 2
    char ascdesc;        // A=ascending, D=descending, F=floating
    char sentence[115];
    
  private:
    byte hex2Byte(char);
    void parseUBX0();
    void setDefaults();

    char ch; 
    byte index;   
    byte parity;
    byte checksum;
    byte healthFlag;
};

#endif
